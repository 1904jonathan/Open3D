// https://google.github.io/filament/Materials.html
material {
    name : ubermaterial,
    shadingModel : lit,
    variantFilter : [ skinning ],
    flipUV : true,
    interpolation : smooth, // flat
    blending : opaque, // transparent, fade, add, masked, multiply, screen
    postLightingBlending : transparent, // opaque, add
    transparency : default, // twoPassesOneSide, twoPassesTwoSides
    maskThreshold : 0.4,
    culling : back, // none, front, frontAndBack
    colorWrite : true,
    depthWrite : true,
    depthCulling : true,
    doubleSided : false,
    // Only for unlit model
    // shadowMultiplier : false,
    clearCoatIorChange : true,
    // Increases the cost of the material if enabled
    specularAntiAliasing : false,
    specularAntiAliasingVariance : 0.15,
    specularAntiAliasingThreshold : 0.2,

    parameters : [
        { type : float4, name : baseColor },
        { type : float,  name : metallic },
        { type : float,  name : roughness },
        { type : float,  name : reflectance },
        { type : float,  name : clearCoat },
        { type : float,  name : clearCoatRoughness },
        { type : float,  name : anisotropy },               // [-1.0 .. 1.0]
        //{ type : float,  name : transmission },
        //{ type : float,  name : ior },
        //{ type : float,  name : thickness },
        //{ type : float,  name : microThickness },

        // Samplers maximum - 16
        { type : sampler2d, name : diffuse },               // float4
        { type : sampler2d, name : tMetallic },
        { type : sampler2d, name : tRoughness },
        { type : sampler2d, name : tReflectance },
        { type : sampler2d, name : tClearCoat },
        { type : sampler2d, name : tClearCoatRoughness },
        { type : sampler2d, name : tAnisotropy },
        //{ type : sampler2d, name : tTransmission },
        //{ type : sampler2d, name : tIor },
        //{ type : sampler2d, name : tThickness },
        //{ type : sampler2d, name : tMicroThickness },
        //{ type : sampler2d, name : anisotropyDirection },
        { type : sampler2d, name : ambientOcclusion },
        { type : sampler2d, name : normalMap }
        //{ type : sampler2d, name : clearCoatNormal },
        //{ type : sampler2d, name : emissive },              // float4
        //{ type : sampler2d, name : postLightingColor },     // float4
        //{ type : sampler2d, name : absorption }
    ],
    requires : [
        uv0
    ]
}

fragment {
    void material(inout MaterialInputs material) {
        vec3 normal = texture(materialParams_normalMap, getUV0()).xyz;
        // not available when the shading model is unlit
        // using a normal map increases the runtime cost of the material model.
        material.normal = normal * 2.0 - 1.0;

        prepareMaterial(material);

        material.baseColor = materialParams.baseColor * texture(materialParams_diffuse, getUV0());
        //material.emissive = texture(materialParams_emissive, getUV0());
        //material.postLightingColor = texture(materialParams_postLightingColor, getUV0());

        // no other field is available with the unlit shading model
        material.roughness = materialParams.roughness * texture(materialParams_tRoughness, getUV0()).r;
        material.metallic = materialParams.metallic * texture(materialParams_tMetallic, getUV0()).r;
        material.reflectance = materialParams.reflectance * texture(materialParams_tReflectance, getUV0()).r;
        material.ambientOcclusion = texture(materialParams_ambientOcclusion, getUV0()).r;

        // the clear coat layer effectively doubles the cost of specular computations.
        // do not assign a value, even 0.0, to the clear coat property if you don't need this second layer.
        material.clearCoat = materialParams.clearCoat * texture(materialParams_tClearCoat, getUV0()).r;

        material.clearCoatRoughness = materialParams.clearCoatRoughness * texture(materialParams_tClearCoatRoughness, getUV0()).r;

        // using a clear coat normal map increases the runtime cost of the material model.
        //material.clearCoatNormal = texture(materialParams_clearCoatNormal, getUV0()).rgb;

        // the anisotropic material model is slightly more expensive than the standard material model.
        // do not assign a value (even 0.0) to the anisotropy property if you don't need anisotropy.
        material.anisotropy = materialParams.anisotropy * texture(materialParams_tAnisotropy, getUV0()).r;

        //material.anisotropyDirection = texture(materialParams_anisotropyDirection, getUV0()).rgb;

        // only available when the shading model is subsurface or refraction is enabled
        //material.thickness = materialParams.thickness * texture(materialParams_tThickness, getUV0()).r;

        // only available when refraction is enabled
        //material.transmission = materialParams.transmission * texture(materialParams_tTransmission, getUV0()).r;
        //material.absorption = texture(materialParams_absorption, getUV0()).rgb;
        //material.ior = materialParams.ior * texture(materialParams_tIor, getUV0()).r;
        // not available with refractionType "solid"
        //material.microThickness = materialParams.microThickness * texture(materialParams_tMicroThickness, getUV0()).r;
    }
}
