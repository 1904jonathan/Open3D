material {
    name : defaultLit,
    shadingModel : lit,
    doubleSided : true,

    parameters : [
        { type : float3,    name : baseColor },
        { type : float,     name : metallic },
        { type : float,     name : roughness },
        { type : float,     name : reflectance },
        { type : float,     name : clearCoat },
        { type : float,     name : clearCoatRoughness },
        { type : float,     name : anisotropy },
        { type : float,     name : pointSize },
	{ type : sampler2d, name : albedo }
    ],
    requires : [
        color, uv0
    ]
}

vertex {
    void materialVertex(inout MaterialVertexInputs material) {
        gl_PointSize = materialParams.pointSize;
    }
}

fragment {
    void material(inout MaterialInputs material) {
        prepareMaterial(material);
        material.baseColor.rgb = getColor().rgb*materialParams.baseColor * texture(materialParams_albedo, getUV0()).rgb;
        material.metallic = materialParams.metallic;
        material.roughness = materialParams.roughness;
        material.reflectance = materialParams.reflectance;
        material.clearCoat = materialParams.clearCoat;
        material.clearCoatRoughness = materialParams.clearCoatRoughness;
        material.anisotropy = materialParams.anisotropy;
    }
}
