material {
    name : obsolete,
    shadingModel : specularGlossiness,
    doubleSided : true,

    parameters : [
        { type : float3,    name : baseColor },
        { type : float3,    name : baseSpecularColor },
        { type : int,       name : illum },
        { type : sampler2d, name : albedo },
        { type : sampler2d, name : specularColor },
        { type : sampler2d, name : glossiness },
        { type : sampler2d, name : normalMap },
        { type : sampler2d, name : ambientOcclusion }
    ],
    requires : [
        uv0
    ]
}

fragment {
    void material(inout MaterialInputs material) {
        vec3 normal = texture(materialParams_normalMap, getUV0()).xyz;
        material.normal = normal * 2.0 - 1.0;

        prepareMaterial(material);
        float4 albedo = texture(materialParams_albedo, getUV0());
        // https://people.cs.clemson.edu/~dhouse/courses/405/docs/brief-mtl-file-format.html
        material.baseColor.rgb = (1.0-albedo.a)*materialParams.baseColor + albedo.a*albedo.rgb;
        float4 specular = texture(materialParams_specularColor, getUV0());
        material.specularColor = (1.0-specular.a)*materialParams.baseSpecularColor + specular.a*specular.rgb;
        material.glossiness = texture(materialParams_glossiness, getUV0()).r;
        material.ambientOcclusion = texture(materialParams_ambientOcclusion, getUV0()).r;

        material.clearCoat = materialParams.illum == 4 ? 1.0 : 0.0;
    }
}
