// ----------------------------------------------------------------------------
// -                        Open3D: www.open3d.org                            -
// ----------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2018 www.open3d.org
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// ----------------------------------------------------------------------------

#include "UnitTest.h"

#include "Core/ColorMap/ImageWarpingField.h"

using namespace std;

// ----------------------------------------------------------------------------
//
// ----------------------------------------------------------------------------
TEST(ImageWarpingField, Constructor)
{
    vector<double> ref =
    {
           0.00,   0.00,  16.00,   0.00,  32.00,   0.00,  48.00,   0.00,
          64.00,   0.00,  80.00,   0.00,  96.00,   0.00, 112.00,   0.00,
         128.00,   0.00, 144.00,   0.00, 160.00,   0.00, 176.00,   0.00,
         192.00,   0.00, 208.00,   0.00, 224.00,   0.00, 240.00,   0.00,
         256.00,   0.00, 272.00,   0.00, 288.00,   0.00, 304.00,   0.00,
         320.00,   0.00,   0.00,  16.00,  16.00,  16.00,  32.00,  16.00,
          48.00,  16.00,  64.00,  16.00,  80.00,  16.00,  96.00,  16.00,
         112.00,  16.00, 128.00,  16.00, 144.00,  16.00, 160.00,  16.00,
         176.00,  16.00, 192.00,  16.00, 208.00,  16.00, 224.00,  16.00,
         240.00,  16.00, 256.00,  16.00, 272.00,  16.00, 288.00,  16.00,
         304.00,  16.00, 320.00,  16.00,   0.00,  32.00,  16.00,  32.00,
          32.00,  32.00,  48.00,  32.00,  64.00,  32.00,  80.00,  32.00,
          96.00,  32.00, 112.00,  32.00, 128.00,  32.00, 144.00,  32.00,
         160.00,  32.00, 176.00,  32.00, 192.00,  32.00, 208.00,  32.00,
         224.00,  32.00, 240.00,  32.00, 256.00,  32.00, 272.00,  32.00,
         288.00,  32.00, 304.00,  32.00, 320.00,  32.00,   0.00,  48.00,
          16.00,  48.00,  32.00,  48.00,  48.00,  48.00,  64.00,  48.00,
          80.00,  48.00,  96.00,  48.00, 112.00,  48.00, 128.00,  48.00,
         144.00,  48.00, 160.00,  48.00, 176.00,  48.00, 192.00,  48.00,
         208.00,  48.00, 224.00,  48.00, 240.00,  48.00, 256.00,  48.00,
         272.00,  48.00, 288.00,  48.00, 304.00,  48.00, 320.00,  48.00,
           0.00,  64.00,  16.00,  64.00,  32.00,  64.00,  48.00,  64.00,
          64.00,  64.00,  80.00,  64.00,  96.00,  64.00, 112.00,  64.00,
         128.00,  64.00, 144.00,  64.00, 160.00,  64.00, 176.00,  64.00,
         192.00,  64.00, 208.00,  64.00, 224.00,  64.00, 240.00,  64.00,
         256.00,  64.00, 272.00,  64.00, 288.00,  64.00, 304.00,  64.00,
         320.00,  64.00,   0.00,  80.00,  16.00,  80.00,  32.00,  80.00,
          48.00,  80.00,  64.00,  80.00,  80.00,  80.00,  96.00,  80.00,
         112.00,  80.00, 128.00,  80.00, 144.00,  80.00, 160.00,  80.00,
         176.00,  80.00, 192.00,  80.00, 208.00,  80.00, 224.00,  80.00,
         240.00,  80.00, 256.00,  80.00, 272.00,  80.00, 288.00,  80.00,
         304.00,  80.00, 320.00,  80.00,   0.00,  96.00,  16.00,  96.00,
          32.00,  96.00,  48.00,  96.00,  64.00,  96.00,  80.00,  96.00,
          96.00,  96.00, 112.00,  96.00, 128.00,  96.00, 144.00,  96.00,
         160.00,  96.00, 176.00,  96.00, 192.00,  96.00, 208.00,  96.00,
         224.00,  96.00, 240.00,  96.00, 256.00,  96.00, 272.00,  96.00,
         288.00,  96.00, 304.00,  96.00, 320.00,  96.00,   0.00, 112.00,
          16.00, 112.00,  32.00, 112.00,  48.00, 112.00,  64.00, 112.00,
          80.00, 112.00,  96.00, 112.00, 112.00, 112.00, 128.00, 112.00,
         144.00, 112.00, 160.00, 112.00, 176.00, 112.00, 192.00, 112.00,
         208.00, 112.00, 224.00, 112.00, 240.00, 112.00, 256.00, 112.00,
         272.00, 112.00, 288.00, 112.00, 304.00, 112.00, 320.00, 112.00,
           0.00, 128.00,  16.00, 128.00,  32.00, 128.00,  48.00, 128.00,
          64.00, 128.00,  80.00, 128.00,  96.00, 128.00, 112.00, 128.00,
         128.00, 128.00, 144.00, 128.00, 160.00, 128.00, 176.00, 128.00,
         192.00, 128.00, 208.00, 128.00, 224.00, 128.00, 240.00, 128.00,
         256.00, 128.00, 272.00, 128.00, 288.00, 128.00, 304.00, 128.00,
         320.00, 128.00,   0.00, 144.00,  16.00, 144.00,  32.00, 144.00,
          48.00, 144.00,  64.00, 144.00,  80.00, 144.00,  96.00, 144.00,
         112.00, 144.00, 128.00, 144.00, 144.00, 144.00, 160.00, 144.00,
         176.00, 144.00, 192.00, 144.00, 208.00, 144.00, 224.00, 144.00,
         240.00, 144.00, 256.00, 144.00, 272.00, 144.00, 288.00, 144.00,
         304.00, 144.00, 320.00, 144.00,   0.00, 160.00,  16.00, 160.00,
          32.00, 160.00,  48.00, 160.00,  64.00, 160.00,  80.00, 160.00,
          96.00, 160.00, 112.00, 160.00, 128.00, 160.00, 144.00, 160.00,
         160.00, 160.00, 176.00, 160.00, 192.00, 160.00, 208.00, 160.00,
         224.00, 160.00, 240.00, 160.00, 256.00, 160.00, 272.00, 160.00,
         288.00, 160.00, 304.00, 160.00, 320.00, 160.00,   0.00, 176.00,
          16.00, 176.00,  32.00, 176.00,  48.00, 176.00,  64.00, 176.00,
          80.00, 176.00,  96.00, 176.00, 112.00, 176.00, 128.00, 176.00,
         144.00, 176.00, 160.00, 176.00, 176.00, 176.00, 192.00, 176.00,
         208.00, 176.00, 224.00, 176.00, 240.00, 176.00, 256.00, 176.00,
         272.00, 176.00, 288.00, 176.00, 304.00, 176.00, 320.00, 176.00,
           0.00, 192.00,  16.00, 192.00,  32.00, 192.00,  48.00, 192.00,
          64.00, 192.00,  80.00, 192.00,  96.00, 192.00, 112.00, 192.00,
         128.00, 192.00, 144.00, 192.00, 160.00, 192.00, 176.00, 192.00,
         192.00, 192.00, 208.00, 192.00, 224.00, 192.00, 240.00, 192.00,
         256.00, 192.00, 272.00, 192.00, 288.00, 192.00, 304.00, 192.00,
         320.00, 192.00,   0.00, 208.00,  16.00, 208.00,  32.00, 208.00,
          48.00, 208.00,  64.00, 208.00,  80.00, 208.00,  96.00, 208.00,
         112.00, 208.00, 128.00, 208.00, 144.00, 208.00, 160.00, 208.00,
         176.00, 208.00, 192.00, 208.00, 208.00, 208.00, 224.00, 208.00,
         240.00, 208.00, 256.00, 208.00, 272.00, 208.00, 288.00, 208.00,
         304.00, 208.00, 320.00, 208.00,   0.00, 224.00,  16.00, 224.00,
          32.00, 224.00,  48.00, 224.00,  64.00, 224.00,  80.00, 224.00,
          96.00, 224.00, 112.00, 224.00, 128.00, 224.00, 144.00, 224.00,
         160.00, 224.00, 176.00, 224.00, 192.00, 224.00, 208.00, 224.00,
         224.00, 224.00, 240.00, 224.00, 256.00, 224.00, 272.00, 224.00,
         288.00, 224.00, 304.00, 224.00, 320.00, 224.00,   0.00, 240.00,
          16.00, 240.00,  32.00, 240.00,  48.00, 240.00,  64.00, 240.00,
          80.00, 240.00,  96.00, 240.00, 112.00, 240.00, 128.00, 240.00,
         144.00, 240.00, 160.00, 240.00, 176.00, 240.00, 192.00, 240.00,
         208.00, 240.00, 224.00, 240.00, 240.00, 240.00, 256.00, 240.00,
         272.00, 240.00, 288.00, 240.00, 304.00, 240.00, 320.00, 240.00
    };

    int width = 320;
    int height = 240;
    int nr_anchors = 16;

    open3d::ImageWarpingField field(width, height, nr_anchors);

    EXPECT_EQ(21, field.anchor_w_);
    EXPECT_EQ(16, field.anchor_h_);

    EXPECT_NEAR(16, field.anchor_step_, unit_test::THRESHOLD_1E_6);

    EXPECT_EQ(672, field.flow_.size());
    for (size_t i = 0; i < field.flow_.size(); i++)
        EXPECT_NEAR(ref[i], field.flow_[i], unit_test::THRESHOLD_1E_6);
}

// ----------------------------------------------------------------------------
// Same as ImageWarpingField.Constructor.
// ----------------------------------------------------------------------------
TEST(ImageWarpingField, DISABLED_InitializeWarpingFields)
{
    unit_test::NotImplemented();
}

// ----------------------------------------------------------------------------
//
// ----------------------------------------------------------------------------
TEST(ImageWarpingField, QueryFlow)
{
    vector<Eigen::Vector2i> coordinates =
    {
        {     5,    81 }, {     6,   109 }, {     7,     0 }, {    10,    15 },
        {    13,     5 }, {    16,    12 }, {    18,    11 }, {    20,     4 },
        {    20,     4 }, {    20,    56 }, {    22,     0 }, {    38,     8 },
        {    41,    12 }, {    42,    97 }, {    47,     7 }, {    55,    10 },
        {    58,     0 }, {    60,     7 }, {    72,   213 }, {    75,   232 },
        {    76,     3 }, {   105,    54 }, {   109,     1 }, {   111,   164 },
        {   114,    10 }, {   129,     3 }, {   130,     0 }, {   138,     0 },
        {   138,     0 }, {   140,   210 }, {   145,    15 }, {   171,     0 },
        {   171,     3 }, {   176,     2 }, {   180,     0 }, {   184,     7 },
        {   188,   157 }, {   193,     3 }, {   193,     3 }, {   205,     0 },
        {   209,   205 }, {   218,     3 }, {   219,   228 }, {   223,   135 },
        {   248,     0 }, {   264,    79 }, {   281,   198 }, {   284,    83 },
        {   304,   141 }, {   314,     0 },
    };

    vector<Eigen::Vector2d> ref_output =
    {
        {    0.00,    0.00 }, {    0.00,    0.00 }, {  112.00,    0.00 },
        {  160.00,  240.00 }, {  208.00,   80.00 }, {  256.00,  192.00 },
        {  288.00,  176.00 }, {  320.00,   64.00 }, {  320.00,   64.00 },
        {    0.00,    0.00 }, {   16.00,   16.00 }, {  272.00,  144.00 },
        {  320.00,  208.00 }, {    0.00,    0.00 }, {   80.00,  144.00 },
        {  208.00,  192.00 }, {  256.00,   32.00 }, {  288.00,  144.00 },
        {    0.00,    0.00 }, {    0.00,    0.00 }, {  208.00,   96.00 },
        {    0.00,    0.00 }, {   64.00,   96.00 }, {    0.00,    0.00 },
        {  144.00,  240.00 }, {   48.00,  144.00 }, {   64.00,   96.00 },
        {  192.00,   96.00 }, {  192.00,   96.00 }, {    0.00,    0.00 },
        {    0.00,    0.00 }, {   48.00,  128.00 }, {   48.00,  176.00 },
        {  128.00,  160.00 }, {  192.00,  128.00 }, {  256.00,  240.00 },
        {    0.00,    0.00 }, {   64.00,  192.00 }, {   64.00,  192.00 },
        {  256.00,  144.00 }, {    0.00,    0.00 }, {  128.00,  208.00 },
        {    0.00,    0.00 }, {    0.00,    0.00 }, {  272.00,  176.00 },
        {    0.00,    0.00 }, {    0.00,    0.00 }, {    0.00,    0.00 },
        {    0.00,    0.00 }, {  320.00,  224.00 },
    };

    int width = 320;
    int height = 240;
    int nr_anchors = 16;

    open3d::ImageWarpingField field(width, height, nr_anchors);

    for (size_t i = 0; i < ref_output.size(); i++)
        unit_test::ExpectEQ(ref_output[i], field.QueryFlow(coordinates[i](0, 0), coordinates[i](1, 0)));
}

// ----------------------------------------------------------------------------
//
// ----------------------------------------------------------------------------
TEST(ImageWarpingField, DISABLED_GetImageWarpingField)
{
    unit_test::NotImplemented();
}
