// ----------------------------------------------------------------------------
// -                        Open3D: www.open3d.org                            -
// ----------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2018-2021 www.open3d.org
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// ----------------------------------------------------------------------------

#pragma once

// This C/C++ header is compatible with ISPC.
// Variadic macros, i.e. ellipsis (...) and __VA_ARGS__ are also supported.
#include "open3d/utility/Preprocessor.h"

/// OPEN3D_SPECIALIZED(T, LambdaFunction)
///
/// Resolves the given template-like function to its specialization of type T.
#define OPEN3D_SPECIALIZED(T, LambdaFunction) \
    OPEN3D_CONCAT(LambdaFunction, OPEN3D_CONCAT(_, T))

/// OPEN3D_INSTANTIATE_TEMPLATE()
///
/// Instantiates a template-like function defined by the TEMPLATE(T) macro for
/// the following types:
/// - unsigned + signed {8,16,32,64} bit integers,
/// - float, double
///
/// Example:
///
/// #define TEMPLATE(T)                                         \
///     static inline void OPEN3D_SPECIALIZED(T, TemplateFunc)( \
///             int64 idx, /* more parameters */) {             \
///         // Do something ...
/// }
///
/// OPEN3D_INSTANTIATE_TEMPLATE()
///
/// #undef TEMPLATE
///
#define OPEN3D_INSTANTIATE_TEMPLATE() \
    TEMPLATE(uint8_t)                 \
    TEMPLATE(int8_t)                  \
    TEMPLATE(uint16_t)                \
    TEMPLATE(int16_t)                 \
    TEMPLATE(uint32_t)                \
    TEMPLATE(int32_t)                 \
    TEMPLATE(uint64_t)                \
    TEMPLATE(int64_t)                 \
    TEMPLATE(float)                   \
    TEMPLATE(double)

/// OPEN3D_INSTANTIATE_TEMPLATE_WITH_BOOL()
///
/// Instantiates a template-like function defined by the TEMPLATE(T) macro for
/// the following types:
/// - bool
/// - unsigned + signed {8,16,32,64} bit integers,
/// - float, double
///
/// See OPEN3D_INSTANTIATE_TEMPLATE() for more details.
#define OPEN3D_INSTANTIATE_TEMPLATE_WITH_BOOL() \
    TEMPLATE(bool)                              \
    OPEN3D_INSTANTIATE_TEMPLATE()

/// OPEN3D_EXPORT_VECTORIZED_LAMBDA(LambdaKernel, LambdaFunction, ...)
///
/// Defines a lambda kernel which calls the provided lambda function.
///
/// Use the OPEN3D_VECTORIZED_LAMBDA macro to call the kernel in the C++
/// source file.
#define OPEN3D_EXPORT_VECTORIZED_LAMBDA(LambdaKernel, LambdaFunction, ...) \
    OPEN3D_OVERLOAD(OPEN3D_EXPORT_VECTORIZED_LAMBDA_, __VA_ARGS__)         \
    (LambdaKernel, LambdaFunction, __VA_ARGS__)

/// Internal helper macro.
#define OPEN3D_EXPORT_OVERLOADED_LAMBDA_(T, LambdaKernel, LambdaFunction, ...) \
    OPEN3D_EXPORT_VECTORIZED_LAMBDA(OPEN3D_SPECIALIZED(T, LambdaKernel),       \
                                    OPEN3D_SPECIALIZED(T, LambdaFunction),     \
                                    __VA_ARGS__)

/// OPEN3D_EXPORT_TEMPLATE_VECTORIZED_LAMBDA(LambdaKernel, LambdaFunction, ...)
///
/// Defines a lambda kernel which calls the provided lambda function.
///
/// Use the OPEN3D_TEMPLATE_VECTORIZED_LAMBDA macro to call the kernel in the
/// C++ source file.
///
/// Use either
/// - OPEN3D_INSTANTIATE_TEMPLATE_WITH_BOOL()
/// - OPEN3D_INSTANTIATE_TEMPLATE() + custom bool specialization
/// to define a lambda function.
#define OPEN3D_EXPORT_TEMPLATE_VECTORIZED_LAMBDA(LambdaKernel, LambdaFunction, \
                                                 ...)                          \
    OPEN3D_EXPORT_OVERLOADED_LAMBDA_(bool, LambdaKernel, LambdaFunction,       \
                                     __VA_ARGS__)                              \
    OPEN3D_EXPORT_OVERLOADED_LAMBDA_(uint8_t, LambdaKernel, LambdaFunction,    \
                                     __VA_ARGS__)                              \
    OPEN3D_EXPORT_OVERLOADED_LAMBDA_(int8_t, LambdaKernel, LambdaFunction,     \
                                     __VA_ARGS__)                              \
    OPEN3D_EXPORT_OVERLOADED_LAMBDA_(uint16_t, LambdaKernel, LambdaFunction,   \
                                     __VA_ARGS__)                              \
    OPEN3D_EXPORT_OVERLOADED_LAMBDA_(int16_t, LambdaKernel, LambdaFunction,    \
                                     __VA_ARGS__)                              \
    OPEN3D_EXPORT_OVERLOADED_LAMBDA_(uint32_t, LambdaKernel, LambdaFunction,   \
                                     __VA_ARGS__)                              \
    OPEN3D_EXPORT_OVERLOADED_LAMBDA_(int32_t, LambdaKernel, LambdaFunction,    \
                                     __VA_ARGS__)                              \
    OPEN3D_EXPORT_OVERLOADED_LAMBDA_(uint64_t, LambdaKernel, LambdaFunction,   \
                                     __VA_ARGS__)                              \
    OPEN3D_EXPORT_OVERLOADED_LAMBDA_(int64_t, LambdaKernel, LambdaFunction,    \
                                     __VA_ARGS__)                              \
    OPEN3D_EXPORT_OVERLOADED_LAMBDA_(float, LambdaKernel, LambdaFunction,      \
                                     __VA_ARGS__)                              \
    OPEN3D_EXPORT_OVERLOADED_LAMBDA_(double, LambdaKernel, LambdaFunction,     \
                                     __VA_ARGS__)

/// See OPEN3D_EXPORT_VECTORIZED_LAMBDA(...) for details.
#define OPEN3D_EXPORT_VECTORIZED_LAMBDA_1(LambdaKernel, LambdaFunction, type1) \
    export void LambdaKernel(uniform int64 start, uniform int64 end,           \
                             type1 arg1) {                                     \
        foreach (i = start... end) { LambdaFunction(i, arg1); }                \
    }

/// See OPEN3D_EXPORT_VECTORIZED_LAMBDA(...) for details.
#define OPEN3D_EXPORT_VECTORIZED_LAMBDA_2(LambdaKernel, LambdaFunction, type1, \
                                          type2)                               \
    export void LambdaKernel(uniform int64 start, uniform int64 end,           \
                             type1 arg1, type2 arg2) {                         \
        foreach (i = start... end) { LambdaFunction(i, arg1, arg2); }          \
    }

/// See OPEN3D_EXPORT_VECTORIZED_LAMBDA(...) for details.
#define OPEN3D_EXPORT_VECTORIZED_LAMBDA_3(LambdaKernel, LambdaFunction, type1, \
                                          type2, type3)                        \
    export void LambdaKernel(uniform int64 start, uniform int64 end,           \
                             type1 arg1, type2 arg2, type3 arg3) {             \
        foreach (i = start... end) { LambdaFunction(i, arg1, arg2, arg3); }    \
    }

/// See OPEN3D_EXPORT_VECTORIZED_LAMBDA(...) for details.
#define OPEN3D_EXPORT_VECTORIZED_LAMBDA_4(LambdaKernel, LambdaFunction, type1, \
                                          type2, type3, type4)                 \
    export void LambdaKernel(uniform int64 start, uniform int64 end,           \
                             type1 arg1, type2 arg2, type3 arg3, type4 arg4) { \
        foreach (i = start... end) {                                           \
            LambdaFunction(i, arg1, arg2, arg3, arg4);                         \
        }                                                                      \
    }

/// See OPEN3D_EXPORT_VECTORIZED_LAMBDA(...) for details.
#define OPEN3D_EXPORT_VECTORIZED_LAMBDA_5(LambdaKernel, LambdaFunction, type1, \
                                          type2, type3, type4, type5)          \
    export void LambdaKernel(uniform int64 start, uniform int64 end,           \
                             type1 arg1, type2 arg2, type3 arg3, type4 arg4,   \
                             type5 arg5) {                                     \
        foreach (i = start... end) {                                           \
            LambdaFunction(i, arg1, arg2, arg3, arg4, arg5);                   \
        }                                                                      \
    }

/// See OPEN3D_EXPORT_VECTORIZED_LAMBDA(...) for details.
#define OPEN3D_EXPORT_VECTORIZED_LAMBDA_6(LambdaKernel, LambdaFunction, type1, \
                                          type2, type3, type4, type5, type6)   \
    export void LambdaKernel(uniform int64 start, uniform int64 end,           \
                             type1 arg1, type2 arg2, type3 arg3, type4 arg4,   \
                             type5 arg5, type6 arg6) {                         \
        foreach (i = start... end) {                                           \
            LambdaFunction(i, arg1, arg2, arg3, arg4, arg5, arg6);             \
        }                                                                      \
    }

/// See OPEN3D_EXPORT_VECTORIZED_LAMBDA(...) for details.
#define OPEN3D_EXPORT_VECTORIZED_LAMBDA_7(LambdaKernel, LambdaFunction, type1, \
                                          type2, type3, type4, type5, type6,   \
                                          type7)                               \
    export void LambdaKernel(uniform int64 start, uniform int64 end,           \
                             type1 arg1, type2 arg2, type3 arg3, type4 arg4,   \
                             type5 arg5, type6 arg6, type7 arg7) {             \
        foreach (i = start... end) {                                           \
            LambdaFunction(i, arg1, arg2, arg3, arg4, arg5, arg6, arg7);       \
        }                                                                      \
    }

/// See OPEN3D_EXPORT_VECTORIZED_LAMBDA(...) for details.
#define OPEN3D_EXPORT_VECTORIZED_LAMBDA_8(LambdaKernel, LambdaFunction, type1, \
                                          type2, type3, type4, type5, type6,   \
                                          type7, type8)                        \
    export void LambdaKernel(uniform int64 start, uniform int64 end,           \
                             type1 arg1, type2 arg2, type3 arg3, type4 arg4,   \
                             type5 arg5, type6 arg6, type7 arg7, type8 arg8) { \
        foreach (i = start... end) {                                           \
            LambdaFunction(i, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); \
        }                                                                      \
    }

/// See OPEN3D_EXPORT_VECTORIZED_LAMBDA(...) for details.
#define OPEN3D_EXPORT_VECTORIZED_LAMBDA_9(LambdaKernel, LambdaFunction, type1, \
                                          type2, type3, type4, type5, type6,   \
                                          type7, type8, type9)                 \
    export void LambdaKernel(uniform int64 start, uniform int64 end,           \
                             type1 arg1, type2 arg2, type3 arg3, type4 arg4,   \
                             type5 arg5, type6 arg6, type7 arg7, type8 arg8,   \
                             type9 arg9) {                                     \
        foreach (i = start... end) {                                           \
            LambdaFunction(i, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8,  \
                           arg9);                                              \
        }                                                                      \
    }
