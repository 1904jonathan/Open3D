#include "open3d/pipelines/mesh_factory/TriangleMeshFactory.h"
#include "tests/UnitTest.h"

namespace open3d {
namespace tests {

TEST(TriangleMeshFactory, CreateMeshSphere) {
    std::vector<Eigen::Vector3d> ref_vertices = {
            {0.000000, 0.000000, 1.000000},
            {0.000000, 0.000000, -1.000000},
            {0.587785, 0.000000, 0.809017},
            {0.475528, 0.345492, 0.809017},
            {0.181636, 0.559017, 0.809017},
            {-0.181636, 0.559017, 0.809017},
            {-0.475528, 0.345492, 0.809017},
            {-0.587785, 0.000000, 0.809017},
            {-0.475528, -0.345492, 0.809017},
            {-0.181636, -0.559017, 0.809017},
            {0.181636, -0.559017, 0.809017},
            {0.475528, -0.345492, 0.809017},
            {0.951057, 0.000000, 0.309017},
            {0.769421, 0.559017, 0.309017},
            {0.293893, 0.904508, 0.309017},
            {-0.293893, 0.904508, 0.309017},
            {-0.769421, 0.559017, 0.309017},
            {-0.951057, 0.000000, 0.309017},
            {-0.769421, -0.559017, 0.309017},
            {-0.293893, -0.904508, 0.309017},
            {0.293893, -0.904508, 0.309017},
            {0.769421, -0.559017, 0.309017},
            {0.951057, 0.000000, -0.309017},
            {0.769421, 0.559017, -0.309017},
            {0.293893, 0.904508, -0.309017},
            {-0.293893, 0.904508, -0.309017},
            {-0.769421, 0.559017, -0.309017},
            {-0.951057, 0.000000, -0.309017},
            {-0.769421, -0.559017, -0.309017},
            {-0.293893, -0.904508, -0.309017},
            {0.293893, -0.904508, -0.309017},
            {0.769421, -0.559017, -0.309017},
            {0.587785, 0.000000, -0.809017},
            {0.475528, 0.345492, -0.809017},
            {0.181636, 0.559017, -0.809017},
            {-0.181636, 0.559017, -0.809017},
            {-0.475528, 0.345492, -0.809017},
            {-0.587785, 0.000000, -0.809017},
            {-0.475528, -0.345492, -0.809017},
            {-0.181636, -0.559017, -0.809017},
            {0.181636, -0.559017, -0.809017},
            {0.475528, -0.345492, -0.809017}};

    std::vector<Eigen::Vector3i> ref_triangles = {
            {0, 2, 3},    {1, 33, 32},  {0, 3, 4},    {1, 34, 33},
            {0, 4, 5},    {1, 35, 34},  {0, 5, 6},    {1, 36, 35},
            {0, 6, 7},    {1, 37, 36},  {0, 7, 8},    {1, 38, 37},
            {0, 8, 9},    {1, 39, 38},  {0, 9, 10},   {1, 40, 39},
            {0, 10, 11},  {1, 41, 40},  {0, 11, 2},   {1, 32, 41},
            {12, 3, 2},   {12, 13, 3},  {13, 4, 3},   {13, 14, 4},
            {14, 5, 4},   {14, 15, 5},  {15, 6, 5},   {15, 16, 6},
            {16, 7, 6},   {16, 17, 7},  {17, 8, 7},   {17, 18, 8},
            {18, 9, 8},   {18, 19, 9},  {19, 10, 9},  {19, 20, 10},
            {20, 11, 10}, {20, 21, 11}, {21, 2, 11},  {21, 12, 2},
            {22, 13, 12}, {22, 23, 13}, {23, 14, 13}, {23, 24, 14},
            {24, 15, 14}, {24, 25, 15}, {25, 16, 15}, {25, 26, 16},
            {26, 17, 16}, {26, 27, 17}, {27, 18, 17}, {27, 28, 18},
            {28, 19, 18}, {28, 29, 19}, {29, 20, 19}, {29, 30, 20},
            {30, 21, 20}, {30, 31, 21}, {31, 12, 21}, {31, 22, 12},
            {32, 23, 22}, {32, 33, 23}, {33, 24, 23}, {33, 34, 24},
            {34, 25, 24}, {34, 35, 25}, {35, 26, 25}, {35, 36, 26},
            {36, 27, 26}, {36, 37, 27}, {37, 28, 27}, {37, 38, 28},
            {38, 29, 28}, {38, 39, 29}, {39, 30, 29}, {39, 40, 30},
            {40, 31, 30}, {40, 41, 31}, {41, 22, 31}, {41, 32, 22}};

    auto output_tm = pipelines::mesh_factory::CreateSphere(1.0, 5);

    ExpectEQ(ref_vertices, output_tm->vertices_);
    ExpectEQ(ref_triangles, output_tm->triangles_);
}

TEST(TriangleMeshFactory, CreateMeshCylinder) {
    std::vector<Eigen::Vector3d> ref_vertices = {
            {0.000000, 0.000000, 1.000000},
            {0.000000, 0.000000, -1.000000},
            {1.000000, 0.000000, 1.000000},
            {0.309017, 0.951057, 1.000000},
            {-0.809017, 0.587785, 1.000000},
            {-0.809017, -0.587785, 1.000000},
            {0.309017, -0.951057, 1.000000},
            {1.000000, 0.000000, 0.500000},
            {0.309017, 0.951057, 0.500000},
            {-0.809017, 0.587785, 0.500000},
            {-0.809017, -0.587785, 0.500000},
            {0.309017, -0.951057, 0.500000},
            {1.000000, 0.000000, 0.000000},
            {0.309017, 0.951057, 0.000000},
            {-0.809017, 0.587785, 0.000000},
            {-0.809017, -0.587785, 0.000000},
            {0.309017, -0.951057, 0.000000},
            {1.000000, 0.000000, -0.500000},
            {0.309017, 0.951057, -0.500000},
            {-0.809017, 0.587785, -0.500000},
            {-0.809017, -0.587785, -0.500000},
            {0.309017, -0.951057, -0.500000},
            {1.000000, 0.000000, -1.000000},
            {0.309017, 0.951057, -1.000000},
            {-0.809017, 0.587785, -1.000000},
            {-0.809017, -0.587785, -1.000000},
            {0.309017, -0.951057, -1.000000}};

    std::vector<Eigen::Vector3i> ref_triangles = {
            {0, 2, 3},    {1, 23, 22},  {0, 3, 4},    {1, 24, 23},
            {0, 4, 5},    {1, 25, 24},  {0, 5, 6},    {1, 26, 25},
            {0, 6, 2},    {1, 22, 26},  {7, 3, 2},    {7, 8, 3},
            {8, 4, 3},    {8, 9, 4},    {9, 5, 4},    {9, 10, 5},
            {10, 6, 5},   {10, 11, 6},  {11, 2, 6},   {11, 7, 2},
            {12, 8, 7},   {12, 13, 8},  {13, 9, 8},   {13, 14, 9},
            {14, 10, 9},  {14, 15, 10}, {15, 11, 10}, {15, 16, 11},
            {16, 7, 11},  {16, 12, 7},  {17, 13, 12}, {17, 18, 13},
            {18, 14, 13}, {18, 19, 14}, {19, 15, 14}, {19, 20, 15},
            {20, 16, 15}, {20, 21, 16}, {21, 12, 16}, {21, 17, 12},
            {22, 18, 17}, {22, 23, 18}, {23, 19, 18}, {23, 24, 19},
            {24, 20, 19}, {24, 25, 20}, {25, 21, 20}, {25, 26, 21},
            {26, 17, 21}, {26, 22, 17}};

    auto output_tm = pipelines::mesh_factory::CreateCylinder(1.0, 2.0, 5);

    ExpectEQ(ref_vertices, output_tm->vertices_);
    ExpectEQ(ref_triangles, output_tm->triangles_);
}

TEST(TriangleMeshFactory, CreateMeshCone) {
    std::vector<Eigen::Vector3d> ref_vertices = {
            {0.000000, 0.000000, 0.000000},  {0.000000, 0.000000, 2.000000},
            {1.000000, 0.000000, 0.000000},  {0.309017, 0.951057, 0.000000},
            {-0.809017, 0.587785, 0.000000}, {-0.809017, -0.587785, 0.000000},
            {0.309017, -0.951057, 0.000000}};

    std::vector<Eigen::Vector3i> ref_triangles = {
            {0, 3, 2}, {1, 2, 3}, {0, 4, 3}, {1, 3, 4}, {0, 5, 4},
            {1, 4, 5}, {0, 6, 5}, {1, 5, 6}, {0, 2, 6}, {1, 6, 2}};

    auto output_tm = pipelines::mesh_factory::CreateCone(1.0, 2.0, 5);

    ExpectEQ(ref_vertices, output_tm->vertices_);
    ExpectEQ(ref_triangles, output_tm->triangles_);
}

TEST(TriangleMeshFactory, CreateMeshArrow) {
    std::vector<Eigen::Vector3d> ref_vertices = {
            {0.000000, 0.000000, 2.000000},   {0.000000, 0.000000, 0.000000},
            {1.000000, 0.000000, 2.000000},   {0.309017, 0.951057, 2.000000},
            {-0.809017, 0.587785, 2.000000},  {-0.809017, -0.587785, 2.000000},
            {0.309017, -0.951057, 2.000000},  {1.000000, 0.000000, 1.500000},
            {0.309017, 0.951057, 1.500000},   {-0.809017, 0.587785, 1.500000},
            {-0.809017, -0.587785, 1.500000}, {0.309017, -0.951057, 1.500000},
            {1.000000, 0.000000, 1.000000},   {0.309017, 0.951057, 1.000000},
            {-0.809017, 0.587785, 1.000000},  {-0.809017, -0.587785, 1.000000},
            {0.309017, -0.951057, 1.000000},  {1.000000, 0.000000, 0.500000},
            {0.309017, 0.951057, 0.500000},   {-0.809017, 0.587785, 0.500000},
            {-0.809017, -0.587785, 0.500000}, {0.309017, -0.951057, 0.500000},
            {1.000000, 0.000000, 0.000000},   {0.309017, 0.951057, 0.000000},
            {-0.809017, 0.587785, 0.000000},  {-0.809017, -0.587785, 0.000000},
            {0.309017, -0.951057, 0.000000},  {0.000000, 0.000000, 2.000000},
            {0.000000, 0.000000, 3.000000},   {1.500000, 0.000000, 2.000000},
            {0.463525, 1.426585, 2.000000},   {-1.213525, 0.881678, 2.000000},
            {-1.213525, -0.881678, 2.000000}, {0.463525, -1.426585, 2.000000}};

    std::vector<Eigen::Vector3i> ref_triangles = {
            {0, 2, 3},    {1, 23, 22},  {0, 3, 4},    {1, 24, 23},
            {0, 4, 5},    {1, 25, 24},  {0, 5, 6},    {1, 26, 25},
            {0, 6, 2},    {1, 22, 26},  {7, 3, 2},    {7, 8, 3},
            {8, 4, 3},    {8, 9, 4},    {9, 5, 4},    {9, 10, 5},
            {10, 6, 5},   {10, 11, 6},  {11, 2, 6},   {11, 7, 2},
            {12, 8, 7},   {12, 13, 8},  {13, 9, 8},   {13, 14, 9},
            {14, 10, 9},  {14, 15, 10}, {15, 11, 10}, {15, 16, 11},
            {16, 7, 11},  {16, 12, 7},  {17, 13, 12}, {17, 18, 13},
            {18, 14, 13}, {18, 19, 14}, {19, 15, 14}, {19, 20, 15},
            {20, 16, 15}, {20, 21, 16}, {21, 12, 16}, {21, 17, 12},
            {22, 18, 17}, {22, 23, 18}, {23, 19, 18}, {23, 24, 19},
            {24, 20, 19}, {24, 25, 20}, {25, 21, 20}, {25, 26, 21},
            {26, 17, 21}, {26, 22, 17}, {27, 30, 29}, {28, 29, 30},
            {27, 31, 30}, {28, 30, 31}, {27, 32, 31}, {28, 31, 32},
            {27, 33, 32}, {28, 32, 33}, {27, 29, 33}, {28, 33, 29}};

    auto output_tm =
            pipelines::mesh_factory::CreateArrow(1.0, 1.5, 2.0, 1.0, 5);

    ExpectEQ(ref_vertices, output_tm->vertices_);
    ExpectEQ(ref_triangles, output_tm->triangles_);
}

TEST(TriangleMeshFactory, CreateMeshCoordinateFrame) {
    std::vector<Eigen::Vector3d> ref_vertices = {
            {0, 0, 0.006},
            {0.000938607, 0, 0.00592613},
            {0.000927051, 0.00014683, 0.00592613},
            {-5.0038e-19, -0.00272394, 0.00534604},
            {0.000426119, -0.00269041, 0.00534604},
            {-6.47846e-19, -0.00352671, 0.0048541},
            {-0.00534604, 6.54701e-19, 0.00272394},
            {-0.00528022, -0.000836305, 0.00272394},
            {-0.00570634, 6.98825e-19, 0.0018541},
            {3.62871e-19, 0.00592613, -0.000938607},
            {-0.000927051, 0.00585317, -0.000938607},
            {3.49412e-19, 0.00570634, -0.0018541},
            {0.00424264, 0, -0.00424264},
            {0.00419041, 0.000663695, -0.00424264},
            {0.00352671, 0, -0.0048541},
            {-3.40593e-19, -0.0018541, -0.00570634},
            {0.000290045, -0.00183127, -0.00570634},
            {-1.72419e-19, -0.000938607, -0.00592613},
            {0, 0.08, 0.0035},
            {0.00108156, 0.08, 0.0033287},
            {0, 0.06, 0.0035},
            {-0.0035, 4.28626e-19, 0.06},
            {-0.0033287, -0.00108156, 0.06},
            {-0.0035, 4.28626e-19, 0.04}};

    std::vector<Eigen::Vector3d> ref_vertex_normals = {
            {0.000000, 0.000000, 1.000000},   {0.182067, -0.006090, 0.983267},
            {0.180778, 0.022466, 0.983267},   {-0.005496, -0.461174, 0.887292},
            {0.066715, -0.456356, 0.887292},  {-0.004990, -0.592357, 0.805660},
            {-0.891954, 0.002800, 0.452117},  {-0.881411, -0.136766, 0.452117},
            {-0.951468, 0.001906, 0.307743},  {-0.000965, 0.987790, -0.155790},
            {-0.155477, 0.975477, -0.155790}, {-0.001906, 0.951468, -0.307743},
            {0.710008, 0.004362, -0.704180},  {0.700584, 0.115378, -0.704180},
            {0.592357, 0.004990, -0.805660},  {0.005866, -0.321047, -0.947045},
            {0.056017, -0.316177, -0.947045}, {0.006090, -0.182067, -0.983267},
            {-0.052367, 0.115722, 0.991900},  {0.256710, 0.115722, 0.959536},
            {0.000000, 0.000000, 1.000000},   {-1.000000, 0.000000, 0.000000},
            {-0.951057, -0.309017, 0.000000}, {-1.000000, 0.000000, 0.000000}};

    std::vector<Eigen::Vector3d> ref_vertex_colors = {
            {0.500000, 0.500000, 0.500000}, {0.500000, 0.500000, 0.500000},
            {0.500000, 0.500000, 0.500000}, {0.500000, 0.500000, 0.500000},
            {0.500000, 0.500000, 0.500000}, {0.500000, 0.500000, 0.500000},
            {0.500000, 0.500000, 0.500000}, {0.500000, 0.500000, 0.500000},
            {0.500000, 0.500000, 0.500000}, {0.500000, 0.500000, 0.500000},
            {0.500000, 0.500000, 0.500000}, {0.500000, 0.500000, 0.500000},
            {0.500000, 0.500000, 0.500000}, {0.500000, 0.500000, 0.500000},
            {0.500000, 0.500000, 0.500000}, {0.500000, 0.500000, 0.500000},
            {0.500000, 0.500000, 0.500000}, {0.500000, 0.500000, 0.500000},
            {0.000000, 1.000000, 0.000000}, {0.000000, 1.000000, 0.000000},
            {0.000000, 1.000000, 0.000000}, {0.000000, 0.000000, 1.000000},
            {0.000000, 0.000000, 1.000000}, {0.000000, 0.000000, 1.000000}};

    std::vector<Eigen::Vector3i> ref_triangles = {
            {0, 1, 2},    {5, 4, 3},    {8, 7, 6},    {11, 10, 9},
            {14, 13, 12}, {17, 16, 15}, {20, 19, 18}, {23, 22, 21}};

    std::vector<Eigen::Vector3d> ref_triangle_normals = {
            {0.078458, 0.006175, 0.996898},   {0.041087, -0.522057, 0.851920},
            {-0.921447, -0.072519, 0.381676}, {-0.076304, 0.969535, -0.232765},
            {0.648601, 0.051046, -0.759415},  {0.018369, -0.233406, -0.972206},
            {0.156434, 0.000000, 0.987688},   {-0.987688, -0.156434, 0.000000}};

    auto output_tm = pipelines::mesh_factory::CreateCoordinateFrame(0.1);

    EXPECT_EQ(1134u, output_tm->vertices_.size());
    EXPECT_EQ(1134u, output_tm->vertex_normals_.size());
    EXPECT_EQ(1134u, output_tm->vertex_colors_.size());
    EXPECT_EQ(2240u, output_tm->triangles_.size());
    EXPECT_EQ(2240u, output_tm->triangle_normals_.size());

    // CreateMeshCoordinateFrame generates too many values
    // down sample to a more manageable size before comparing
    int stride = 300;
    std::vector<size_t> indices;
    for (size_t i = 0; i < output_tm->triangles_.size(); i += stride) {
        indices.push_back(output_tm->triangles_[i](0, 0));
        indices.push_back(output_tm->triangles_[i](1, 0));
        indices.push_back(output_tm->triangles_[i](2, 0));
    }
    unique(indices.begin(), indices.end());
    sort(indices.begin(), indices.end());
    auto output = output_tm->SelectByIndex(indices);

    ExpectEQ(ref_vertices, output->vertices_);
    ExpectEQ(ref_vertex_normals, output->vertex_normals_);
    ExpectEQ(ref_vertex_colors, output->vertex_colors_);
    ExpectEQ(ref_triangles, output->triangles_);
    ExpectEQ(ref_triangle_normals, output->triangle_normals_);
}

}  // namespace tests
}  // namespace open3d
