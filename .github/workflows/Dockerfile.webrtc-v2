FROM ubuntu:18.04

# Dependencies
RUN apt-get update && apt-get install -y \
    apt-transport-https \
    build-essential \
    ca-certificates \
    ccache \
    git  \
    gnupg \
    python \
    python3 \
    software-properties-common \
    wget \
 && rm -rf /var/lib/apt/lists/*

# CMake
# Ref: https://apt.kitware.com/
RUN wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null \
    | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null \
 && apt-add-repository --yes 'deb https://apt.kitware.com/ubuntu/ bionic main' \
 && apt-get update \
 && apt-get --yes install cmake \
 && rm -rf /var/lib/apt/lists/*
RUN which cmake \
 && cmake --version

# Get depot_tools
RUN git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
ENV PATH=/depot_tools:${PATH}
ENV DEPOT_TOOLS_UPDATE=0
RUN which fetch

# Get WebRTC
RUN mkdir webrtc \
 && cd webrtc \
 && fetch webrtc \
 && cd ..

# Checkout to a specific version
# Ref: https://chromium.googlesource.com/chromium/src/+/master/docs/building_old_revisions.md
#
# depot_tools:
# ```
# commit 84ce160786308521c2fd115fa554ca6be161158c
# Author: Brian Ryner <bryner@google.com>
# Date:   Tue Mar 23 02:05:57 2021 +0000
# ```
#
# webrtc:
# ```
# commit e2ac591c0d43ad7bc398950a6c6f4d4aa05dfa87
# Author: webrtc-version-updater
# Date:   Mon Mar 22 21:03:39 2021 -0700
# ```
RUN cd depot_tools \
 && git checkout 84ce160786308521c2fd115fa554ca6be161158c \
 && cd ../webrtc/src \
 && git checkout e2ac591c0d43ad7bc398950a6c6f4d4aa05dfa87 \
 && git submodule update --init --recursive \
 && cd .. \
 && gclient sync -D --force --reset \
 && cd ..

# PWD is /, camke will be installed to /root/${CMAKE_VER}/bin/cmake
# RUN CMAKE_VER_NUMBERS=$(echo "${CMAKE_VER}" | cut -d"-" -f2) \
#  && wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VER_NUMBERS}/${CMAKE_VER}.tar.gz \
#  && tar -xf ${CMAKE_VER}.tar.gz \
#  && cp -ar ${CMAKE_VER} ${HOME}
# ENV PATH=${HOME}/${CMAKE_VER}/bin:${PATH}
# RUN which cmake \
#  && cmake --version

# # Export ARG to ENV
# ARG CMAKE_VER=cmake-3.19.7-Linux-x86_64
# ARG CCACHE_TAR_NAME=open3d-x86_64-ci-ccache

# # Non-interactive dpkg
# ARG DEBIAN_FRONTEND=noninteractive

# # Open3D dependencies
# RUN apt-get update && apt-get install -y \
#     apt-utils  \
#     autoconf \
#     build-essential \
#     ccache \
#     clang-7 \
#     git  \
#     libblas-dev  \
#     libc++-7-dev \
#     libc++abi-7-dev \
#     libglu1-mesa-dev \
#     liblapack-dev  \
#     liblapacke-dev \
#     libosmesa6-dev \
#     libsdl2-dev \
#     libtbb-dev \
#     libtool \
#     libudev-dev \
#     libxi-dev \
#     ninja-build \
#     wget \
#     xorg-dev \
#  && rm -rf /var/lib/apt/lists/*

# # No virtual environment is needed, default to python 3.6
# RUN apt-get update && apt-get install -y \
#     python3 \
#     python3-dev \
#     python3-pip \
#     python3-setuptools \
#  && rm -rf /var/lib/apt/lists/*
# RUN ln -s /usr/bin/python3 /usr/local/bin/python \
#  && ln -s /usr/bin/python3-config /usr/local/bin/python-config \
#  && ln -s /usr/bin/pip3 /usr/local/bin/pip

# # Python dependencies
# RUN python -m pip install -U \
#     pip=="20.2.4" \
#     wheel=="0.35.1" \
#     setuptools=="50.3.2" \
#     yapf=="0.30.0" \
#     pytest=="6.0.1" \
#     scipy=="1.5.4" \
#     wheel=="0.35.1"

# # Download ccache from GCS bucket (optional)
# # Example directory structure:
# # CCACHE_DIR        = ~/.cache/ccache
# # CCACHE_DIR_NAME   = ccache
# # CCACHE_DIR_PARENT = ~/.cache
# RUN CCACHE_DIR=$(ccache -p | grep cache_dir | grep -oE "[^ ]+$") \
#  && CCACHE_DIR_NAME=$(basename ${CCACHE_DIR}) \
#  && CCACHE_DIR_PARENT=$(dirname ${CCACHE_DIR}) \
#  && mkdir -p ${CCACHE_DIR_PARENT} \
#  && cd ${CCACHE_DIR_PARENT} \
#  && wget https://storage.googleapis.com/open3d-ci-cache/${CCACHE_TAR_NAME}.tar.gz \
#  && tar -xf ${CCACHE_TAR_NAME}.tar.gz \
#  && ccache -s
# ENV PATH=/usr/lib/ccache:${PATH}

# # `docker build` should be executed in the Open3D root dir
# COPY . /root/Open3D

# # `docker build` will build Open3D. The unit tests will be executed later in
# # during `docker run`
# WORKDIR /root/Open3D
# RUN mkdir build \
#  && cd build \
#  && cmake \
#     -DUSE_BLAS=ON \
#     -DCMAKE_BUILD_TYPE=Release \
#     -DBUILD_SHARED_LIBS=ON \
#     -DBUILD_GUI=ON \
#     -DCMAKE_C_COMPILER=gcc \
#     -DCMAKE_CXX_COMPILER=g++ \
#     -DBUILD_FILAMENT_FROM_SOURCE=ON \
#     -DBUILD_TENSORFLOW_OPS=OFF \
#     -DBUILD_PYTORCH_OPS=OFF \
#     -DBUILD_UNIT_TESTS=ON \
#     -DCMAKE_INSTALL_PREFIX=~/open3d_install \
#     -DPYTHON_EXECUTABLE="$(which python3)" \
#     .. \
#  && make -j$(nproc) \
#  && make install-pip-package -j$(nproc)

# # Compress ccache folder, move to / directory (optional)
# RUN ccache -s \
#  && CCACHE_DIR=$(ccache -p | grep cache_dir | grep -oE "[^ ]+$") \
#  && CCACHE_DIR_NAME=$(basename ${CCACHE_DIR}) \
#  && CCACHE_DIR_PARENT=$(dirname ${CCACHE_DIR}) \
#  && cd ${CCACHE_DIR_PARENT} \
#  && tar -czf ${CCACHE_TAR_NAME}.tar.gz ${CCACHE_DIR_NAME} \
#  && mv ${CCACHE_TAR_NAME}.tar.gz /
