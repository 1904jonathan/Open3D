name: Windows CI

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, reopened, synchronize]    # Rebuild on new pushes to PR

jobs:
  windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        shared: [ON, OFF]
        static_runtime: [ON, OFF]
        CONFIG: [Release, Debug]

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python version
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - name: Config
        run: |
          mkdir build
          cd build
          cmake -G "Visual Studio 16 2019" -A x64 -DBUILD_EXAMPLES=OFF -DCMAKE_INSTALL_PREFIX="C:\Program Files\Open3D" -DBUILD_SHARED_LIBS=${{ matrix.shared }} -DSTATIC_WINDOWS_RUNTIME=${{ matrix.static_runtime }} ..
      - name: Build
        run: |
          cd build
          cmake --build . --parallel 2 --config ${{ matrix.CONFIG }} --target INSTALL
          cmake --build . --parallel 2 --config ${{ matrix.CONFIG }} --target build-examples-iteratively
      - name: Linking to Open3D
        run: |
          cd docs\_static\C++
          mkdir build
          cd build
          cmake -G "Visual Studio 16 2019" -A x64 -DCMAKE_INSTALL_PREFIX="C:\Program Files\Open3D" -DSTATIC_WINDOWS_RUNTIME=${{ matrix.static_runtime }} ..
          cmake --build . --config ${{ matrix.CONFIG }} && .\${{ matrix.CONFIG }}\TestVisualizer.exe
      - name: Install Python package
        run: |
          python -m pip install --upgrade pip
          python -m pip install -U wheel
          cd build
          cmake --build . --config ${{ matrix.CONFIG }} --target install-pip-package
      - name: Import python package
        # If shared == ON, Open3D.dll needs to be copied, which is not recommended for python.
        if: ${{ matrix.shared == 'OFF' }}
        run: |
          python -c "import open3d; print(open3d)"
          python -c "import open3d; open3d.pybind.core.kernel.test_mkl_integration()"
          python -c "import open3d; print('CUDA enabled: ', open3d.__cuda__)"


  build-windows-wheel:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python_version: [3.5, 3.6, 3.7, 3.8]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python version
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}
      - name: Config
        run: |
          mkdir build
          cd build
          cmake -G "Visual Studio 16 2019" -A x64 -DCMAKE_INSTALL_PREFIX="C:\Program Files\Open3D" -DBUILD_SHARED_LIBS=OFF -DSTATIC_WINDOWS_RUNTIME=ON ..
      - name: Build Python package
        run: |
          python -m pip install --upgrade pip
          python -m pip install -U wheel
          cd build
          cmake --build . --config Release --target install-pip-package
          $PIP_PKG_NAME=(Get-ChildItem lib/python_package/pip_package/open3d*.whl).Name
          echo "::set-env name=PIP_PKG_NAME::$PIP_PKG_NAME"
      - name: Upload wheel
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PIP_PKG_NAME }}
          path: build/lib/python_package/pip_package/${{ env.PIP_PKG_NAME }}
          if-no-files-found: error

  test-windows-wheel:
    name: Test windows wheel
    runs-on: windows-latest
    needs: [build-windows-wheel]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          submodules: false
      - name: Download wheels
        uses: actions/download-artifact@v2
        # See https://github.com/dawidd6/action-download-artifact for more
        # flexible artifact download options
        with:
          path: open3d_wheels
      - name: Set up Python 3.5
        uses: actions/setup-python@v2
        with:
          python-version: 3.5
      - name: Test Python 3.5 package
        run: |
          python3.5 -m pip install open3d_wheels/open3d*cp35*/open3d*cp35*.whl
          python3.5 -c "import open3d; print(open3d)"
          python3.5 -c "import open3d; open3d.pybind.core.kernel.test_mkl_integration()"
          python3.5 -c "import open3d; print('CUDA enabled: ', open3d.__cuda__)"
      - name: Set up Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - name: Test Python 3.6 package
        run: |
          python3.6 -m pip install open3d_wheels/open3d*cp36*/open3d*cp36*.whl
          python3.6 -c "import open3d; print(open3d)"
          python3.6 -c "import open3d; open3d.pybind.core.kernel.test_mkl_integration()"
          python3.6 -c "import open3d; print('CUDA enabled: ', open3d.__cuda__)"
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Test Python 3.7 package
        run: |
          python3.7 -m pip install open3d_wheels/open3d*cp37*/open3d*cp37*.whl
          python3.7 -c "import open3d; print(open3d)"
          python3.7 -c "import open3d; open3d.pybind.core.kernel.test_mkl_integration()"
          python3.7 -c "import open3d; print('CUDA enabled: ', open3d.__cuda__)"
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Test Python 3.8 package
        run: |
          python3.8 -m pip install open3d_wheels/open3d*cp38*/open3d*cp38*.whl
          python3.8 -c "import open3d; print(open3d)"
          python3.8 -c "import open3d; open3d.pybind.core.kernel.test_mkl_integration()"
          python3.8 -c "import open3d; print('CUDA enabled: ', open3d.__cuda__)"
