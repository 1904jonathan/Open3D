name: Windows CI

on:
  push:
    branches:
      - master
      - ssheorey/build-wheel
  pull_request:
    types: [opened, reopened, synchronize]    # Rebuild on new pushes to PR

jobs:
  #  windows:
  #    runs-on: windows-latest
  #    strategy:
  #      matrix:
  #        shared: [ON, OFF]
  #        static_runtime: [ON, OFF]
  #        CONFIG: [Release, Debug]
  #    steps:
  #      - name: Checkout source code
  #        uses: actions/checkout@v2
  #        with:
  #          submodules: true
  #      - name: Set up Python version
  #        uses: actions/setup-python@v2
  #        with:
  #          python-version: 3.6
  #      - name: Config
  #        run: |
  #          mkdir build
  #          cd build
  #          cmake -G "Visual Studio 16 2019" -A x64 -DCMAKE_INSTALL_PREFIX="C:\Program Files\Open3D" -DBUILD_SHARED_LIBS=${{ matrix.shared }} -DSTATIC_WINDOWS_RUNTIME=${{ matrix.static_runtime }} ..
  #      - name: Build
  #        run: |
  #          cd build
  #          cmake --build . --parallel 2 --config ${{ matrix.CONFIG }} --target INSTALL
  #      - name: Linking to Open3D
  #        run: |
  #          cd docs\_static\C++
  #          mkdir build
  #          cd build
  #          cmake -G "Visual Studio 16 2019" -A x64 -DCMAKE_INSTALL_PREFIX="C:\Program Files\Open3D" -DSTATIC_WINDOWS_RUNTIME=${{ matrix.static_runtime }} ..
  #          cmake --build . --config ${{ matrix.CONFIG }} && .\${{ matrix.CONFIG }}\TestVisualizer.exe
  #      - name: Install Python package
  #        run: |
  #          pip install --upgrade pip
  #          pip install -U wheel
  #          cd build
  #          cmake --build . --config ${{ matrix.CONFIG }} --target install-pip-package
  #      - name: Import python package
  #        # If shared == ON, Open3D.dll needs to be copied, which is not recommended for python.
  #        if: ${{ matrix.shared == 'OFF' }}
  #        run: |
  #          python -c "import open3d; print(open3d)"
  #          python -c "import open3d; open3d.pybind.core.kernel.test_mkl_integration()"


  build-windows-wheel:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python_version: [3.5, 3.8]
    env:
      shared: OFF
      static_runtime: ON
      CONFIG: Release
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python version
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}
      - name: Config
        run: |
          mkdir build
          cd build
          cmake -G "Visual Studio 16 2019" -A x64 -DCMAKE_INSTALL_PREFIX="C:\Program Files\Open3D" -DBUILD_SHARED_LIBS=${{ env.shared }} -DSTATIC_WINDOWS_RUNTIME=${{ env.static_runtime }} ..
      - name: Build Python package
        run: |
          pip install --upgrade pip
          pip install -U wheel
          cd build
          cmake --build . --config ${{ env.CONFIG }} --target install-pip-package
          $PIP_PKG_NAME=(Get-ChildItem lib/python_package/pip_package/open3d*.whl).Name
          echo "::set-env name=PIP_PKG_NAME::$PIP_PKG_NAME"
      - name: Test Python package
        run: |
          python -c "import open3d; print(open3d)"
          python -c "import open3d; open3d.pybind.core.kernel.test_mkl_integration()"
      - name: Upload wheel
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PIP_PKG_NAME }}
          path: build/lib/python_package/pip_package/${{ env.PIP_PKG_NAME }}
          if-no-files-found: error
