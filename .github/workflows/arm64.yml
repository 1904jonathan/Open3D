# Minium test for Open3D with OpenBLAS/LAPACK on both x86_64 and aarch64.
# This test is intentionally kept minimal and self-contained.

name: Ubuntu OpenBLAS CI

on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:
    types: [opened, reopened, synchronize]

env:
  GCE_CLI_GHA_VERSION: '302.0.0'      # Fixed to avoid dependency on API changes

jobs:
  # ARM64 build can be slow, so it is spilt into multiple steps.
  # - arm64-step-1: compiles all 3rd-party libraries and upload the Open3D repo
  #   directory (including the build directory) as GitHub artifacts.
  # - arm64-step-2: downloads the Open3D directory from arm64-step-1, builds the
  #   rest of the library and runs the unit tests.
  arm64-step-1:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Build on ARM Container
        uses: uraimo/run-on-arch-action@v2.0.2
        with:
          # Ubuntu 20.04 has sufficiently new CMake
          arch: aarch64
          distro: ubuntu20.04

          # Speeds up builds
          githubToken: ${{ github.token }}

          # https://github.com/uraimo/run-on-arch-action/issues/4
          setup: |
            mkdir -p ~/.ccache

          # Mount cached directories in the container for faster builds
          dockerRunArgs: |
            --volume "${HOME}/.ccache:/root/.ccache"

          # Build and run Open3D tests
          run: |
            source util/ci_utils.sh
            install_arm64_dependencies
            source ${HOME}/venv/bin/activate
            PATH=/usr/lib/ccache:$PATH
            PATH=${HOME}/cmake-3.18-aarch64/bin:$PATH
            ccache -M 1.5G  # See .github/workflows/readme.md for ccache strategy.
            ccache -s
            mkdir build
            cd build
            cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_SHARED_LIBS=ON \
              -DBUILD_GUI=ON \
              -DBUILD_LIBREALSENSE=ON \
              -DCMAKE_C_COMPILER=gcc \
              -DCMAKE_CXX_COMPILER=g++ \
              -DBUILD_TENSORFLOW_OPS=OFF \
              -DBUILD_PYTORCH_OPS=OFF \
              -DBUILD_UNIT_TESTS=ON \
              -DCMAKE_INSTALL_PREFIX=~/open3d_install \
              -DPYTHON_EXECUTABLE=$(which python) \
              ..
            ccache -s

      # GITHUB_WORKSPACE: /home/runner/work/Open3D/Open3D
      - name: Compress Open3D repo directory
        run: |
          echo "Listing PWD: $(pwd)"
          ls -alh
          sudo chown -R $(id -u):$(id -g) ${GITHUB_WORKSPACE}/build
          cd ${GITHUB_WORKSPACE}/..
          tar -czvf open3d-repo-dir-cache.tar.gz Open3D
          mv open3d-repo-dir-cache.tar.gz Open3D
          cd Open3D
          echo "Listing PWD: $(pwd)"
          ls -alh

      - name: List workspace directory
        run: |
          sudo apt-get install tree -y
          tree ${GITHUB_WORKSPACE}

      - name: Upload Open3D directory to GitHub artifacts
        uses: actions/upload-artifact@v2
        with:
          name: open3d-repo-dir-cache
          path: open3d-repo-dir-cache.tar.gz
          retention-days: 1

  arm64-step-2:
    runs-on: ubuntu-20.04
    needs: [arm64-step-1]
    strategy:
      fail-fast: false
    steps:
      - name: Download Open3D directory from GitHub artifacts
        uses: actions/download-artifact@v2
        with:
          name: open3d-repo-dir-cache

      - name: Inflate Open3D repo directory
        run: |
          echo "GITHUB_WORKSPACE: ${GITHUB_WORKSPACE}"
          echo "Listing PWD: $(pwd)"
          ls -alh
          echo "Listing GITHUB_WORKSPACE: $(GITHUB_WORKSPACE)"
          ls ${GITHUB_WORKSPACE} -alh
          cd ${GITHUB_WORKSPACE}/..
          echo "Listing PWD: $(pwd)"
          ls -alh
          tar -xvf open3d-repo-dir-cache.tar.gz
          echo "Listing PWD: $(pwd)"
          ls -alh

      - name: List workspace directory
        run: |
          sudo apt-get install tree -y
          tree ${GITHUB_WORKSPACE}

      - name: Build on ARM Container
        uses: uraimo/run-on-arch-action@v2.0.2
        with:
          # Ubuntu 20.04 has sufficiently new CMake
          arch: aarch64
          distro: ubuntu20.04

          # Speeds up builds
          githubToken: ${{ github.token }}

          # https://github.com/uraimo/run-on-arch-action/issues/4
          setup: |
            mkdir -p ~/.ccache

          # Mount cached directories in the container for faster builds
          dockerRunArgs: |
            --volume "${HOME}/.ccache:/root/.ccache"

          # Build and run Open3D tests. No need to run CMake config again.
          run: |
            source util/ci_utils.sh
            install_arm64_dependencies
            source ${HOME}/venv/bin/activate
            PATH=/usr/lib/ccache:$PATH
            PATH=${HOME}/cmake-3.18-aarch64/bin:$PATH
            ccache -M 1.5G  # See .github/workflows/readme.md for ccache strategy.
            ccache -s
            cd build
            cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_SHARED_LIBS=ON \
              -DBUILD_GUI=ON \
              -DBUILD_LIBREALSENSE=ON \
              -DCMAKE_C_COMPILER=gcc \
              -DCMAKE_CXX_COMPILER=g++ \
              -DBUILD_TENSORFLOW_OPS=OFF \
              -DBUILD_PYTORCH_OPS=OFF \
              -DBUILD_UNIT_TESTS=ON \
              -DCMAKE_INSTALL_PREFIX=~/open3d_install \
              -DPYTHON_EXECUTABLE=$(which python) \
              ..
            ccache -s
