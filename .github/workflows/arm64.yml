# Minium test for Open3D with OpenBLAS/LAPACK on both x86_64 and aarch64.
# This test is intentionally kept minimal and self-contained.

name: Ubuntu OpenBLAS CI

on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:
    types: [opened, reopened, synchronize]

env:
  GCE_CLI_GHA_VERSION: '302.0.0'      # Fixed to avoid dependency on API changes

jobs:
  x86_64:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
    steps:
      - name: Cancel outdated
        uses: fkirc/skip-duplicate-actions@master
        with:
          github_token: ${{ github.token }}

      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Maximize build space
        run: |
          source util/ci_utils.sh
          maximize_ubuntu_github_actions_build_space

      - name: Docker build
        run: |
          docker build -t open3d-openblas-ci:latest -f .github/workflows/Dockerfile.openblas .

      - name: C++ tests
        run: |
          docker run --rm open3d-openblas-ci:latest \
            build/bin/tests --gtest_filter="-*Reduce*Sum*"

      - name: Python tests
        run: |
          docker run --rm open3d-openblas-ci:latest \
            pytest python/test/ --ignore python/test/ml_ops/ --ignore python/test/t/io/test_realsense.py

  # ARM64 build can be slow, so it is spilt into multiple steps.
  # - arm64-step-1: compiles all 3rd-party libraries and upload the Open3D repo
  #   directory (including the build directory) as GitHub artifacts.
  # - arm64-step-2: downloads the Open3D directory from arm64-step-1, builds the
  #   rest of the library and runs the unit tests.
  arm64-step-1:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
    steps:
      - name: Cancel outdated
        uses: fkirc/skip-duplicate-actions@master
        with:
          github_token: ${{ github.token }}

      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Maximize build space
        run: |
          source util/ci_utils.sh
          maximize_ubuntu_github_actions_build_space

      - name: Setup Docker with QEMU
        run: |
          sudo apt-get --yes install qemu binfmt-support qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Docker build (open3d-arm64-ci:3rdparty)
        run: |
          docker build -t open3d-arm64-ci:3rdparty -f .github/workflows/Dockerfile.arm64-3rdparty .

      - name: Docker save
        run: |
          docker save open3d-arm64-ci:3rdparty | gzip > open3d-arm64-ci_3rdparty.tar.gz
          mv open3d-arm64-ci_3rdparty.tar.gz ${GITHUB_WORKSPACE}

      # GITHUB_WORKSPACE: /home/runner/work/Open3D/Open3D
      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v2
        with:
          name: open3d-arm64-ci_3rdparty
          path: open3d-arm64-ci_3rdparty.tar.gz
          retention-days: 1

  arm64-step-2:
    runs-on: ubuntu-20.04
    needs: [arm64-step-1]
    strategy:
      fail-fast: false
    steps:
      - name: Cancel outdated
        uses: fkirc/skip-duplicate-actions@master
        with:
          github_token: ${{ github.token }}

      - name: Download Docker image
        uses: actions/download-artifact@v2
        with:
          name: open3d-arm64-ci_3rdparty

      - name: Setup Docker with QEMU
        run: |
          sudo apt-get --yes install qemu binfmt-support qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Docker load (open3d-arm64-ci:3rdparty)
        run: |
          docker load --input open3d-arm64-ci_3rdparty.tar.gz

      - name: Docker build (open3d-arm64-ci:full)
        run: |
          docker build -t open3d-arm64-ci:full -f .github/workflows/Dockerfile.arm64-full .

      - name: C++ tests
        run: |
          docker run --rm open3d-arm64-ci:full \
            build/bin/tests --gtest_filter="-*Reduce*Sum*"

      - name: Python tests
        run: |
          docker run --rm open3d-arm64-ci:full \
            pytest python/test/ --ignore python/test/ml_ops/ --ignore python/test/t/io/test_realsense.py
