name: Ubuntu OpenBLAS

on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:
    types: [opened, reopened, synchronize]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  GCE_GPU_CI_SA: ${{ secrets.GCE_GPU_CI_SA }}
  GCE_CLI_GHA_VERSION: '302.0.0'      # Fixed to avoid dependency on API changes

jobs:
  # openblas-amd64:
  #   runs-on: ubuntu-20.04
  #   strategy:
  #     fail-fast: false
  #   steps:
  #     - name: Checkout source code
  #       uses: actions/checkout@v2
  #     - name: Maximize build space
  #       run: |
  #         source util/ci_utils.sh
  #         maximize_ubuntu_github_actions_build_space
  #     - name: Docker build
  #       run: |
  #         docker/docker_build.sh openblas-amd64-py36-dev
  #     - name: GCloud CLI setup
  #       uses: google-github-actions/setup-gcloud@v0.2.1
  #       with:
  #         version: ${{ env.GCE_CLI_GHA_VERSION }}
  #         service_account_key: ${{ secrets.GCE_SA_KEY_DOCS_CI }}
  #         project_id: ${{ secrets.GCE_DOCS_PROJECT }}
  #         export_default_credentials: true
  #     - name: Upload ccache to GCS
  #       run: |
  #         gsutil cp ${GITHUB_WORKSPACE}/open3d-ci-openblas-amd64.tar.gz gs://open3d-ci-cache/ || true
  #     - name: Docker test
  #       run: |
  #         docker/docker_test.sh openblas-amd64-py36-dev

  # How to resolve GitHub Actions ARM64 build timeout.
  #
  # When there are large amount of code change (e.g. changed some headers that
  # causes re-compilation of many files), the GitHub Actions build could timeout
  # due to excessive ccache misses. The solution is to build the branch manually
  # and update the ccache artifacts on the Google Cloud bucket. Run:
  #
  # ```bash
  # docker/docker_build.sh openblas-arm64-py36-dev
  # gsutil cp open3d-ci-openblas-arm64.tar.gz gs://open3d-ci-cache/
  # ```
  openblas-arm64:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
    env:
      # Export everything from matrix to be easily used.
      # Docker tag and ccache names must be consistent with docker_build.sh
      CI_CONFIG          : openblas-arm64-py36-dev
      GCE_INSTANCE_PREFIX: open3d-ci-openblas-arm64-py36-dev
      CCACHE_TAR_NAME    : open3d-ci-openblas-arm64
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Package code
        run: |
          # GITHUB_WORKSPACE: /home/runner/work/Open3D/Open3D
          cd "${GITHUB_WORKSPACE}/.."
          tar -czvf Open3D.tar.gz Open3D
          ls -alh
      - name: GCloud CLI setup
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          version: ${{ env.GCE_CLI_GHA_VERSION }}
          service_account_key: ${{ secrets.GCE_SA_KEY_GPU_CI }}
          project_id: ${{ secrets.GCE_PROJECT }}
      - name: VM create
        run: |
          gcloud compute images list
          gcloud container images list
          INSTANCE_NAME="${GCE_INSTANCE_PREFIX}-${GITHUB_SHA::8}"
          INSTANCE_ZONES=(us-west1-a
                          us-west1-b
                          us-central1-a
                          us-central1-b
                          us-central1-f
                          us-east1-c
                          us-east1-d
                          us-east4-b
                          southamerica-east1-c
                          europe-west2-b
                          europe-west3-b
                          europe-west4-b
                          europe-west4-c
                          europe-west2-a
                          asia-southeast1-b
                          asia-southeast1-c
                          australia-southeast1-a)
          # GCE only supports GPU on n1-standard (2020/07)
          ZONE_ID=0
          until ((ZONE_ID >= ${#INSTANCE_ZONES[@]})) ||
            gcloud compute instances create "$INSTANCE_NAME" \
              --zone="${INSTANCE_ZONES[$ZONE_ID]}" \
              --accelerator="count=1,type=nvidia-tesla-t4" \
              --maintenance-policy="TERMINATE" \
              --machine-type=n1-standard-8 \
              --boot-disk-size="128GB" \
              --boot-disk-type="pd-ssd" \
              --image-project="ubuntu-os-cloud" \
              --image-family="ubuntu-2004-lts" \
              --metadata-from-file=startup-script=./util/gcloud_auto_clean.sh \
              --scopes="storage-full,compute-rw" \
              --service-account="$GCE_GPU_CI_SA"; do
              ((ZONE_ID = ZONE_ID + 1))
          done
          sleep 60
          echo "GCE_ZONE=${INSTANCE_ZONES[$ZONE_ID]}" >> "${GITHUB_ENV}"
          echo "INSTANCE_NAME=${INSTANCE_NAME}" >> "${GITHUB_ENV}"
          exit $((ZONE_ID >= ${#INSTANCE_ZONES[@]})) # 0 => success
      - name: VM copy code
        run: |
          gcloud compute scp \
            "${GITHUB_WORKSPACE}/../Open3D.tar.gz" "${INSTANCE_NAME}":~ \
            --zone "${GCE_ZONE}"
          gcloud compute ssh "${INSTANCE_NAME}" \
            --zone "${GCE_ZONE}" \
            --command "ls -alh \
                    && tar -xvzf Open3D.tar.gz \
                    && ls -alh \
                    && ls -alh Open3D"
      - name: VM install QEMU dependencies
        run: |
          gcloud compute ssh "${INSTANCE_NAME}" \
            --zone "${GCE_ZONE}" \
            --command "sudo apt-get update \
                    && sudo apt-get --yes install qemu binfmt-support qemu-user-static"
      - name: VM install docker
        run: |
          gcloud compute ssh "${INSTANCE_NAME}" \
            --zone="${GCE_ZONE}" \
            --command="sudo apt update \
                    && sudo apt install -y docker.io \
                    && docker --version \
                    && sudo systemctl start docker \
                    && sudo systemctl enable docker \
                    && sudo systemctl status docker \
                    && docker images"
      # && sudo groupadd docker \
      # && sudo usermod -aG docker $USER \
      # && su - $USER \
      # && id -nG"
      - name: VM build docker
        run: |
          gcloud compute ssh "${INSTANCE_NAME}" \
            --zone="${GCE_ZONE}" \
            --command="sudo Open3D/docker/docker_build.sh ${CI_CONFIG}"
      - name: VM ccache upload
        if: ${{ github.ref == 'refs/heads/master' }}
        run: |
          gcloud compute ssh "${INSTANCE_NAME}" \
            --zone="${GCE_ZONE}" \
            --command="ls -alh \
                    && gsutil cp ${CCACHE_TAR_NAME}.tar.gz gs://open3d-ci-cache/"
      - name: VM run docker
        run: |
          gcloud compute ssh "${INSTANCE_NAME}" \
            --zone="${GCE_ZONE}" \
            --command="sudo Open3D/docker/docker_test.sh ${CI_CONFIG}"
      - name: VM delete
        if: always()
        run: |
          gcloud compute instances delete "${INSTANCE_NAME}" --zone "${GCE_ZONE}"
          ls -alh "${HOME}/.ssh"
          gcloud compute os-login ssh-keys remove --key-file "${HOME}/.ssh/google_compute_engine.pub"
  
      # - name: GCloud CLI setup
      #   uses: google-github-actions/setup-gcloud@v0.2.1
      #   with:
      #     version: ${{ env.GCE_CLI_GHA_VERSION }}
      #     service_account_key: ${{ secrets.GCE_SA_KEY_DOCS_CI }}
      #     project_id: ${{ secrets.GCE_DOCS_PROJECT }}
      #     export_default_credentials: true
      # - name: Upload ccache to GCS
      #   run: |
      #     gsutil cp ${GITHUB_WORKSPACE}/open3d-ci-openblas-arm64.tar.gz gs://open3d-ci-cache/ || true
      # - name: Docker test
      #   run: |
      #     docker/docker_test.sh openblas-arm64-py36-dev
